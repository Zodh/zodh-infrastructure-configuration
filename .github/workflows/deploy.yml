name: "Deploy Infra with Terraform"

on:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout do código de Infra
        uses: actions/checkout@v4

      - name: Clonar o repositório do Lambda
        uses: actions/checkout@v4
        with:
          repository: Zodh/zodh-authorizer
          path: lambda
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Instalar dependências do Lambda
        working-directory: ./lambda
        run: |
          npm install axios pg aws-sdk

      - name: Gerar .zip do Lambda
        run: |
          cd lambda
          zip -r ../zodh-authorizer.zip *

      - name: Verificar arquivos na raiz do projeto
        run: ls -lah

      - name: Configurar credenciais da AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.1

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply com fallback
        run: |
          echo "Iniciando terraform apply..."
          if terraform apply -auto-approve tfplan; then
            echo "✅ Terraform apply executado com sucesso!"
          else
            echo "❌ Erro no terraform apply. Executando rollback com terraform destroy..."
            terraform destroy -auto-approve || echo "Erro também ao tentar destruir recursos."
            exit 1
          fi
